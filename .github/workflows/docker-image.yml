name: SwordsLine-Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
      build_backend: ${{ steps.check_backend.outputs.build_backend }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for backend changes
        id: check_backend
        run: |
          files_changed=$(git diff --name-only origin/main...HEAD)
          echo "Files changed: $files_changed"
          if echo "$files_changed" | grep -E '^backend/|docker-compose.yml'; then
            echo "build_backend=true" >> $GITHUB_OUTPUT
          else
            echo "build_backend=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check_backend.outputs.build_backend == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Get project version
        id: vars
        if: steps.check_backend.outputs.build_backend == 'true'
        run: |
          if git describe --tags --exact-match > /dev/null 2>&1; then
            echo "VERSION=$(git describe --tags --exact-match)" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        if: steps.check_backend.outputs.build_backend == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push backend image
        if: steps.check_backend.outputs.build_backend == 'true'
        run: |
          docker build ./backend --file ./backend/Dockerfile --tag ghcr.io/swords-line-team/swords-line-backend:${{ steps.vars.outputs.VERSION }}
          docker push ghcr.io/swords-line-team/swords-line-backend:${{ steps.vars.outputs.VERSION }}

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    outputs:
      build_frontend: ${{ steps.check_frontend.outputs.build_frontend }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for frontend changes
        id: check_frontend
        run: |
          files_changed=$(git diff --name-only origin/main...HEAD)
          echo "Files changed: $files_changed"
          if echo "$files_changed" | grep -E '^frontend/|docker-compose.yml'; then
            echo "build_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "build_frontend=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        if: steps.check_frontend.outputs.build_frontend == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Get version from previous job
        if: steps.check_frontend.outputs.build_frontend == 'true'
        run: echo "VERSION=${{ needs.build-backend.outputs.version }}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        if: steps.check_frontend.outputs.build_frontend == 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push frontend image
        if: steps.check_frontend.outputs.build_frontend == 'true'
        run: |
          docker build ./frontend --file ./frontend/Dockerfile --tag ghcr.io/swords-line-team/swords-line-frontend:${{ env.VERSION }}
          docker push ghcr.io/swords-line-team/swords-line-frontend:${{ env.VERSION }}

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Deploy on prod server via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /home/swords-line-web
            echo "${{ secrets.FRONTEND_ENV_FILE }}" > ./frontend/.env
            echo "${{ secrets.BACKEND_ENV_FILE }}" > ./backend/.env
            docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.CR_PAT }}
            docker compose pull
            docker compose up -d
